##########################################################
# Title: Donut Diagram
# Suggestion from Dr. Nawwaf Kharma - Concordia University
#
# Author: Vincent Beaulieu
# Date: 14 September 2022
###########################################################
###########################################################
#
# Info: Display in a circular diagram the folding 
# probabilities of a RNA sequence using a coolwarm colormap
#
###########################################################
import toolbox

import networkx as nx
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np

from plot_style import plot_style


###########################################################
# Plot style (background color)
figure_style = plot_style()
figure_style.select("gray")     # white / gray / black
###########################################################
# Edge thickness control parameters:
weight = 4                      # thickness multiplier
edge_thickness_control = True   # relative thickness
###########################################################

# Create networkx graph object
G = nx.Graph()

# Get data from ".prob" file (Generated by VARNA)
sequence_nb = 1000
filepath = 'Datasets/HDV/prob/SEQUENCE_'+str(sequence_nb)+'.prob'
data = toolbox.csv_reader(filepath,delimiter='\t')

# Convert data from string to float
prob_data = np.array(data).astype(float)

# Extract data and create nodes and edges
edge_stack=[]
color_stack=[]
max_prob = 0
min_prob = 1
for i in range(prob_data.shape[0]): # row
    for j in range(i+1,prob_data.shape[1]): # col
        tmp_prob = prob_data[i,j]
        if tmp_prob > 0:
            if tmp_prob > max_prob: max_prob = tmp_prob
            if tmp_prob < min_prob: min_prob = tmp_prob
        G.add_edge(i,j)
        edge_stack.append(tmp_prob)
        pass
    pass

# Set background color
plt.style.use(figure_style.background) # dark_background
fig, ax = plt.subplots()

# Choose colormap ref: https://matplotlib.org/stable/tutorials/colors/colormaps.html
cmap = plt.cm.coolwarm

# Get the colormap colors
my_cmap = cmap(np.arange(cmap.N))

# Set alpha (transparency)
my_cmap[:,-1] = np.linspace(0, 1, cmap.N)

# Create new colormap
my_cmap = mpl.colors.ListedColormap(my_cmap)

# Normalize and assign the new color map with the ".prob" data
norm = mpl.colors.Normalize(vmin=min_prob, vmax=max_prob)
m = mpl.cm.ScalarMappable(norm=norm, cmap=my_cmap)
weight_stack=[]
for e in edge_stack:
    color_stack.append(m.to_rgba(e))
    weight_stack.append(weight*(e-min_prob)/(max_prob-min_prob))
if edge_thickness_control:
    weight = weight_stack

# Define labels and nodes color
filepath = 'Datasets/HDV/fasta/single/SEQUENCE_'+str(sequence_nb)+'.fasta'
data = toolbox.csv_reader(filepath,delimiter='\n')
labeldict = {}
colordict = []
tmp = list(data[1][0])
for i in range(len(G.nodes)):
    tmp_i = tmp[i]
    labeldict[i] = tmp_i
    if tmp_i == 'G':
        colordict.append('r') # red
    elif tmp_i == 'C':
        colordict.append('b') # blue
    elif tmp_i == 'A':
        colordict.append('#90EE90') # light green
    else:
        colordict.append('#FFFFE0') # light yellow

# Define the network layout
pos = nx.circular_layout(G)
options = {
    "node_size"  : figure_style.node_size,
    "node_color" : colordict,

    "font_size"   : figure_style.font_size,
    "with_labels" : True,
    "labels"      : labeldict,
    "font_color"  : "k",

    "edge_color" : color_stack,
    "width"      : weight,
}
nx.draw_networkx(G, pos, **options)

# Display the diagram
ax = plt.gca()
ax.margins(0)
ax.collections[0].set_edgecolor('black')
plt.tight_layout()
plt.axis("off")
plt.show()